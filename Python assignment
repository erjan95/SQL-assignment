#1


def count_lett(t):

    n = len(t)
 
    res = 0
    for i in range(n):
        for j in range(i, n):
            if check(i, j):
                res = max(res, j - i + 1)
    return res

s = 'abcabcbb'
d = "bbbbb"
f = "pwwkew"
print(count_letters(s))
print(count_letters(d))
print(count_letters(f))



#2

def parenth(N):
    results = []

    def track(parenthesis, opening, closing):
        if len(parenthesis) == 2 * N:
            results.append(parenthesis)
            return

        if opening < N:
            track(parenthesis + '(', opening + 1, closing)
        if closing < opening:
            track(parenthesis + ')', opening, closing + 1)

    track('', 0, 0)
    return results

print(parenth(3))
print(parenth(1))


#3

def checkPalindrome(string): 
      
    # Returns true if str is palindrome,  
    # else false 
    length = len(string) 
    length -= 1
    for i in range(length): 
        if string[i] != string[length]: 
            return False
        length -= 1
    return True
  
def printSolution(partitions): 
    for i in range(len(partitions)): 
        for j in range(len(partitions[i])): 
            print(partitions[i][j], end = " ") 
        print() 
  
def addStrings(v, s, temp, index): 
      
    # Goes through all indexes and  
    # recursively add remaining partitions  
    # if current string is palindrome. 
    length = len(s) 
    string = "" 
  
    current = temp[:] 
  
    if index == 0: 
        temp = [] 
    for i in range(index, length): 
        string += s[i] 
        if checkPalindrome(string): 
            temp.append(string) 
            if i + 1 < length: 
                addStrings(v, s, temp[:], i + 1) 
            else: 
                v.append(temp) 
            temp = current 
  
def partition(s, v): 
      
    # Generates all palindromic partitions  
    # of 's' and stores the result in 'v'. 
    temp = [] 
    addStrings(v, s, temp[:], 0) 
    printSolution(v) 
  
# Driver Code 
if __name__ == "__main__": 
    s = "aab"
    partitions = [] 
    partition(s, partitions)
